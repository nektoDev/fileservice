buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.9.0"
        classpath "gradle.plugin.net.vivin:gradle-semantic-build-versioning:2.0.2"
    }
}

plugins {
    id "net.vivin.gradle-semantic-build-versioning" version "2.0.2"
}


apply plugin: 'spring-boot'
apply plugin: "com.palantir.docker"

docker {
    name "nektodev/file-service"
    tags 'latest'
    dockerfile 'Dockerfile'
    dependsOn tasks.jar, tasks.bootRepackage
    pull true
}

dependencies {
    compile project(':facade')
}

jar {
    baseName = 'file-service'
    version = project.version
}
allprojects {

    group 'ru.nektodev.file-service'

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: "maven"
    apply plugin: "net.vivin.gradle-semantic-build-versioning"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
        compile group: 'com.google.guava', name: 'guava', version: '11.0.2'
    }
}

project.version.with {
    tagPrefix = "v"
}

task releaseMajor(dependsOn: ['clean', 'bumpMajor', 'release', 'docker']) << {
    println "Release ${project.name} version: ${project.version}"
}

task releaseMinor(dependsOn: ['clean', 'bumpMinor', 'release', 'docker']) << {
    println "Release ${project.name} version: ${project.version}"
}

task releasePatch(dependsOn: ['clean', 'bumpPatch', 'release', 'docker']) << {
    println "Release ${project.name} version: ${project.version}"
}

task dockerTagAndPush << {
    dockerTag.execute()

    exec {
        commandLine "docker", "tag", "${docker.name}:latest", "${docker.name}:v${project.version}"
    }

    dockerPush.execute()
}

releasePatch.doLast {
    dockerTagAndPush.execute()
    tag.execute()
}

releaseMinor.doLast {
    dockerTagAndPush.execute()
    tag.execute()
}

releaseMajor.doLast {
    dockerTagAndPush.execute()
    tag.execute()
}